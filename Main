import React, { useState } from 'react';

// Single-file React app suitable for GitHub Pages or any static host
// - Uses Tailwind classes (ensure Tailwind is set up in the project)
// - Default export a React component you can render from index.jsx
// - No external API required; orders are exported as mailto / JSON

export default function CustomTeeApp() {
  const [products] = useState([
    { id: 1, title: 'Classic Tee', price: 18, description: 'Soft cotton, unisex fit' },
    { id: 2, title: 'Premium Tee', price: 26, description: 'Heavier weight, nicer drape' },
    { id: 3, title: 'Long Sleeve Tee', price: 30, description: 'Lightweight long sleeve' }
  ]);

  const [selectedProduct, setSelectedProduct] = useState(products[0]);
  const [size, setSize] = useState('M');
  const [color, setColor] = useState('White');
  const [quantity, setQuantity] = useState(1);
  const [designFile, setDesignFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [cart, setCart] = useState([]);

  function handleFile(e) {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    setDesignFile(f);
    const reader = new FileReader();
    reader.onload = () => setPreviewUrl(reader.result);
    reader.readAsDataURL(f);
  }

  function addToCart() {
    const item = {
      id: Date.now(),
      product: selectedProduct,
      size,
      color,
      quantity: Number(quantity),
      designName: designFile ? designFile.name : 'None',
    };
    setCart((c) => [...c, item]);
  }

  function subtotal() {
    return cart.reduce((s, it) => s + it.product.price * it.quantity, 0);
  }

  function clearCart() {
    setCart([]);
  }

  function orderSummaryMailto() {
    if (cart.length === 0) return;
    const lines = [];
    lines.push('New order from GitHub site');
    lines.push('');
    cart.forEach((it, i) => {
      lines.push(`${i + 1}. ${it.product.title} — $${it.product.price} x ${it.quantity}`);
      lines.push(`   Size: ${it.size}, Color: ${it.color}, Design: ${it.designName}`);
    });
    lines.push('');
    lines.push(`Subtotal: $${subtotal().toFixed(2)}`);
    const body = encodeURIComponent(lines.join('\n'));
    const subject = encodeURIComponent('New custom t‑shirt order');
    return `mailto:orders@yourdomain.com?subject=${subject}&body=${body}`;
  }

  return (
    <div className="min-h-screen bg-gradient-to-tr from-gray-50 to-white p-6">
      <header className="max-w-5xl mx-auto flex items-center justify-between py-6">
        <div>
          <h1 className="text-3xl font-extrabold">Custom Tee Co.</h1>
          <p className="text-sm text-gray-600">Design. Print. Ship. Repeat.</p>
        </div>
        <nav className="space-x-4">
          <a className="text-sm hover:underline" href="#products">Products</a>
          <a className="text-sm hover:underline" href="#customize">Customize</a>
          <a className="text-sm hover:underline" href="#cart">Cart ({cart.length})</a>
        </nav>
      </header>

      <main className="max-w-5xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-8">
        <section className="lg:col-span-2 space-y-6">
          <section id="products" className="bg-white p-6 rounded-2xl shadow">
            <h2 className="text-xl font-semibold mb-4">Products</h2>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
              {products.map((p) => (
                <div key={p.id} className={`p-4 rounded-lg border ${selectedProduct.id === p.id ? 'border-indigo-500' : 'border-gray-200'}`}>
                  <div className="h-40 bg-gray-100 rounded-md flex items-center justify-center">IMG</div>
                  <h3 className="mt-3 font-medium">{p.title}</h3>
                  <p className="text-xs text-gray-500">{p.description}</p>
                  <div className="mt-2 flex items-center justify-between">
                    <strong>${p.price}</strong>
                    <button onClick={() => setSelectedProduct(p)} className="text-sm px-3 py-1 rounded-lg border hover:bg-indigo-50">Select</button>
                  </div>
                </div>
              ))}
            </div>
          </section>

          <section id="customize" className="bg-white p-6 rounded-2xl shadow">
            <h2 className="text-xl font-semibold mb-4">Customize</h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <label className="text-sm">Size</label>
                <select value={size} onChange={(e) => setSize(e.target.value)} className="w-full rounded-md border p-2">
                  <option>XS</option>
                  <option>S</option>
                  <option>M</option>
                  <option>L</option>
                  <option>XL</option>
                  <option>XXL</option>
                </select>
              </div>

              <div className="space-y-2">
                <label className="text-sm">Color</label>
                <select value={color} onChange={(e) => setColor(e.target.value)} className="w-full rounded-md border p-2">
                  <option>White</option>
                  <option>Black</option>
                  <option>Red</option>
                  <option>Blue</option>
                  <option>Green</option>
                </select>
              </div>

              <div className="space-y-2 md:col-span-2">
                <label className="text-sm">Upload design (PNG, JPG)</label>
                <input type="file" accept="image/*" onChange={handleFile} className="w-full" />
                {previewUrl && (
                  <div className="mt-2 p-2 border rounded">
                    <img src={previewUrl} alt="preview" className="max-h-40 object-contain" />
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm">Quantity</label>
                <input type="number" min={1} value={quantity} onChange={(e) => setQuantity(e.target.value)} className="w-full rounded-md border p-2" />
              </div>

              <div className="flex items-end justify-end md:col-span-2">
                <button onClick={addToCart} className="px-4 py-2 rounded-2xl bg-indigo-600 text-white font-semibold hover:brightness-95">Add to cart</button>
              </div>
            </div>
          </section>

          <section className="bg-white p-6 rounded-2xl shadow">
            <h2 className="text-xl font-semibold mb-4">How it works</h2>
            <ol className="list-decimal pl-6 text-sm text-gray-700 space-y-2">
              <li>Choose a product, size and color.</li>
              <li>Upload your design and set quantity.</li>
              <li>Add to cart — then email the order or export JSON for fulfillment.</li>
              <li>We provide proofs & ship after payment (you’ll collect payment separately or integrate later).</li>
            </ol>
          </section>
        </section>

        <aside id="cart" className="space-y-6">
          <div className="bg-white p-6 rounded-2xl shadow">
            <h3 className="font-semibold text-lg">Cart ({cart.length})</h3>
            <div className="mt-4 space-y-3">
              {cart.length === 0 && <p className="text-sm text-gray-500">Your cart is empty.</p>}
              {cart.map((it) => (
                <div key={it.id} className="p-3 border rounded flex items-start justify-between">
                  <div>
                    <div className="font-medium">{it.product.title} — ${it.product.price}</div>
                    <div className="text-xs text-gray-600">{it.quantity} × Size {it.size} · {it.color}</div>
                    <div className="text-xs text-gray-500">Design: {it.designName}</div>
                  </div>
                  <div className="text-right">
                    <div className="font-semibold">${(it.product.price * it.quantity).toFixed(2)}</div>
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-4 border-t pt-4 flex items-center justify-between">
              <div>
                <div className="text-sm text-gray-600">Subtotal</div>
                <div className="font-bold text-lg">${subtotal().toFixed(2)}</div>
              </div>
              <div className="space-x-2">
                <a href={orderSummaryMailto()} className={`inline-block px-3 py-2 rounded-2xl border ${cart.length===0? 'opacity-40 pointer-events-none': 'bg-green-600 text-white'}`}>Email Order</a>
                <button onClick={clearCart} className="px-3 py-2 rounded-2xl border">Clear</button>
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-2xl shadow">
            <h3 className="font-semibold">Preview Mockup</h3>
            <div className="mt-4 h-56 bg-gray-50 rounded flex items-center justify-center border">
              {previewUrl ? (
                <img src={previewUrl} alt="mockup" className="max-h-48 object-contain" />
              ) : (
                <div className="text-sm text-gray-500">Upload a design to preview it here</div>
              )}
            </div>
          </div>

          <div className="bg-white p-6 rounded-2xl shadow text-sm text-gray-600">
            <strong>Tips to deploy</strong>
            <ul className="list-disc pl-5 mt-2">
              <li>Push this component into a React app (create-react-app or Vite).</li>
              <li>Enable Tailwind in your build or replace classes with plain CSS.</li>
              <li>Use GitHub Pages or Netlify for hosting; connect a custom domain if you want.</li>
            </ul>
          </div>
        </aside>
      </main>

      <footer className="mt-12 max-w-5xl mx-auto text-center text-xs text-gray-500">© {new Date().getFullYear()} Custom Tee Co. Built with ❤️</footer>
    </div>
  );
}
